{
    "$id": "/CodeAction",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AnnotatedTextEdit": {
            "description": "A special text edit with an additional change annotation.",
            "properties": {
                "annotationId": {
                    "$ref": "/CodeAction#/definitions/ChangeAnnotationIdentifier",
                    "description": "The actual identifier of the change annotation"
                },
                "newText": {
                    "description": "The string to be inserted. For delete operations use an\nempty string.",
                    "type": "string"
                },
                "range": {
                    "$ref": "/CodeAction#/definitions/Range",
                    "description": "The range of the text document to be manipulated. To insert\ntext into a document create a range where start === end."
                }
            },
            "required": [
                "annotationId",
                "newText",
                "range"
            ],
            "type": "object"
        },
        "ChangeAnnotation": {
            "description": "Additional information that describes document changes.",
            "properties": {
                "description": {
                    "description": "A human-readable string which is rendered less prominent in\nthe user interface.",
                    "type": "string"
                },
                "label": {
                    "description": "A human-readable string describing the actual change. The string\nis rendered prominent in the user interface.",
                    "type": "string"
                },
                "needsConfirmation": {
                    "description": "A flag which indicates that user confirmation is needed\nbefore applying the change.",
                    "type": "boolean"
                }
            },
            "required": [
                "label"
            ],
            "type": "object"
        },
        "ChangeAnnotationIdentifier": {
            "description": "An identifier to refer to a change annotation stored with a workspace edit.",
            "type": "string"
        },
        "CodeActionKind": {
            "description": "The kind of a code action.\n\nKinds are a hierarchical list of identifiers separated by `.`, e.g. `\"refactor.extract.function\"`.\n\nThe set of kinds is open and client needs to announce the kinds it supports to the server during\ninitialization.\nA set of predefined code action kinds",
            "type": "string"
        },
        "CodeDescription": {
            "description": "Structure to capture a description for an error code.\nThe CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.",
            "properties": {
                "href": {
                    "$ref": "/CodeAction#/definitions/URI",
                    "description": "An URI to open with more information about the diagnostic error."
                }
            },
            "required": [
                "href"
            ],
            "type": "object"
        },
        "Command": {
            "description": "Represents a reference to a command. Provides a title which\nwill be used to represent a command in the UI and, optionally,\nan array of arguments which will be passed to the command handler\nfunction when invoked.\nThe Command namespace provides helper functions to work with\n[Command](#Command) literals.",
            "properties": {
                "arguments": {
                    "description": "Arguments that the command handler should be\ninvoked with.",
                    "items": {},
                    "type": "array"
                },
                "command": {
                    "description": "The identifier of the actual command handler.",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the command, like `save`.",
                    "type": "string"
                }
            },
            "required": [
                "command",
                "title"
            ],
            "type": "object"
        },
        "CreateFile": {
            "description": "Create file operation.",
            "properties": {
                "annotationId": {
                    "$ref": "/CodeAction#/definitions/ChangeAnnotationIdentifier",
                    "description": "An optional annotation identifier describing the operation."
                },
                "kind": {
                    "description": "A create",
                    "enum": [
                        "create"
                    ],
                    "type": "string"
                },
                "options": {
                    "$ref": "/CodeAction#/definitions/CreateFileOptions",
                    "description": "Additional options"
                },
                "uri": {
                    "$ref": "/CodeAction#/definitions/DocumentUri",
                    "description": "The resource to create."
                }
            },
            "required": [
                "kind",
                "uri"
            ],
            "type": "object"
        },
        "CreateFileOptions": {
            "description": "Options to create a file.",
            "properties": {
                "ignoreIfExists": {
                    "description": "Ignore if exists.",
                    "type": "boolean"
                },
                "overwrite": {
                    "description": "Overwrite existing file. Overwrite wins over `ignoreIfExists`",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DeleteFile": {
            "description": "Delete file operation",
            "properties": {
                "annotationId": {
                    "$ref": "/CodeAction#/definitions/ChangeAnnotationIdentifier",
                    "description": "An optional annotation identifier describing the operation."
                },
                "kind": {
                    "description": "A delete",
                    "enum": [
                        "delete"
                    ],
                    "type": "string"
                },
                "options": {
                    "$ref": "/CodeAction#/definitions/DeleteFileOptions",
                    "description": "Delete options."
                },
                "uri": {
                    "$ref": "/CodeAction#/definitions/DocumentUri",
                    "description": "The file to delete."
                }
            },
            "required": [
                "kind",
                "uri"
            ],
            "type": "object"
        },
        "DeleteFileOptions": {
            "description": "Delete file options",
            "properties": {
                "ignoreIfNotExists": {
                    "description": "Ignore the operation if the file doesn't exist.",
                    "type": "boolean"
                },
                "recursive": {
                    "description": "Delete the content recursively if a folder is denoted.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Diagnostic": {
            "description": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a resource.\nThe Diagnostic namespace provides helper functions to work with\n[Diagnostic](#Diagnostic) literals.",
            "properties": {
                "code": {
                    "description": "The diagnostic's code, which usually appear in the user interface.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "codeDescription": {
                    "$ref": "/CodeAction#/definitions/CodeDescription",
                    "description": "An optional property to describe the error code."
                },
                "data": {
                    "description": "A data entry field that is preserved between a `textDocument/publishDiagnostics`\nnotification and `textDocument/codeAction` request."
                },
                "message": {
                    "description": "The diagnostic's message. It usually appears in the user interface",
                    "type": "string"
                },
                "range": {
                    "$ref": "/CodeAction#/definitions/Range",
                    "description": "The range at which the message applies"
                },
                "relatedInformation": {
                    "description": "An array of related diagnostic information, e.g. when symbol-names within\na scope collide all definitions can be marked via this property.",
                    "items": {
                        "$ref": "/CodeAction#/definitions/DiagnosticRelatedInformation"
                    },
                    "type": "array"
                },
                "severity": {
                    "$ref": "/CodeAction#/definitions/DiagnosticSeverity",
                    "description": "The diagnostic's severity. Can be omitted. If omitted it is up to the\nclient to interpret diagnostics as error, warning, info or hint."
                },
                "source": {
                    "description": "A human-readable string describing the source of this\ndiagnostic, e.g. 'typescript' or 'super lint'. It usually\nappears in the user interface.",
                    "type": "string"
                },
                "tags": {
                    "description": "Additional metadata about the diagnostic.",
                    "items": {
                        "description": "The diagnostic tags.",
                        "enum": [
                            1,
                            2
                        ],
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "required": [
                "message",
                "range"
            ],
            "type": "object"
        },
        "DiagnosticRelatedInformation": {
            "description": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g when duplicating\na symbol in a scope.\nThe DiagnosticRelatedInformation namespace provides helper functions to work with\n[DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.",
            "properties": {
                "location": {
                    "$ref": "/CodeAction#/definitions/Location",
                    "description": "The location of this related diagnostic information."
                },
                "message": {
                    "description": "The message of this related diagnostic information.",
                    "type": "string"
                }
            },
            "required": [
                "location",
                "message"
            ],
            "type": "object"
        },
        "DiagnosticSeverity": {
            "description": "The diagnostic's severity.",
            "enum": [
                1,
                2,
                3,
                4
            ],
            "type": "number"
        },
        "DocumentUri": {
            "description": "A tagging type for string properties that are actually document URIs.",
            "type": "string"
        },
        "Location": {
            "description": "Represents a location inside a resource, such as a line\ninside a text file.\nThe Location namespace provides helper functions to work with\n[Location](#Location) literals.",
            "properties": {
                "range": {
                    "$ref": "/CodeAction#/definitions/Range"
                },
                "uri": {
                    "$ref": "/CodeAction#/definitions/DocumentUri"
                }
            },
            "required": [
                "range",
                "uri"
            ],
            "type": "object"
        },
        "OptionalVersionedTextDocumentIdentifier": {
            "description": "A text document identifier to optionally denote a specific version of a text document.\nThe OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n[OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) literals.",
            "properties": {
                "uri": {
                    "$ref": "/CodeAction#/definitions/DocumentUri",
                    "description": "The text document's uri."
                },
                "version": {
                    "description": "The version number of this document. If a versioned text document identifier\nis sent from the server to the client and the file is not open in the editor\n(the server has not received an open notification before) the server can send\n`null` to indicate that the version is unknown and the content on disk is the\ntruth (as specified with document content ownership).",
                    "type": "number"
                }
            },
            "required": [
                "uri",
                "version"
            ],
            "type": "object"
        },
        "Position": {
            "description": "Position in a text document expressed as zero-based line and character offset.\nThe offsets are based on a UTF-16 string representation. So a string of the form\n`a\ud801\udc00b` the character offset of the character `a` is 0, the character offset of `\ud801\udc00`\nis 1 and the character offset of b is 3 since `\ud801\udc00` is represented using two code\nunits in UTF-16.\n\nPositions are line end character agnostic. So you can not specify a position that\ndenotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position namespace provides helper functions to work with\n[Position](#Position) literals.",
            "properties": {
                "character": {
                    "$ref": "/CodeAction#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length."
                },
                "line": {
                    "$ref": "/CodeAction#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                }
            },
            "required": [
                "character",
                "line"
            ],
            "type": "object"
        },
        "Range": {
            "description": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```\nThe Range namespace provides helper functions to work with\n[Range](#Range) literals.",
            "properties": {
                "end": {
                    "$ref": "/CodeAction#/definitions/Position",
                    "description": "The range's end position."
                },
                "start": {
                    "$ref": "/CodeAction#/definitions/Position",
                    "description": "The range's start position"
                }
            },
            "required": [
                "end",
                "start"
            ],
            "type": "object"
        },
        "RenameFile": {
            "description": "Rename file operation",
            "properties": {
                "annotationId": {
                    "$ref": "/CodeAction#/definitions/ChangeAnnotationIdentifier",
                    "description": "An optional annotation identifier describing the operation."
                },
                "kind": {
                    "description": "A rename",
                    "enum": [
                        "rename"
                    ],
                    "type": "string"
                },
                "newUri": {
                    "$ref": "/CodeAction#/definitions/DocumentUri",
                    "description": "The new location."
                },
                "oldUri": {
                    "$ref": "/CodeAction#/definitions/DocumentUri",
                    "description": "The old (existing) location."
                },
                "options": {
                    "$ref": "/CodeAction#/definitions/RenameFileOptions",
                    "description": "Rename options."
                }
            },
            "required": [
                "kind",
                "newUri",
                "oldUri"
            ],
            "type": "object"
        },
        "RenameFileOptions": {
            "description": "Rename file options",
            "properties": {
                "ignoreIfExists": {
                    "description": "Ignores if target exists.",
                    "type": "boolean"
                },
                "overwrite": {
                    "description": "Overwrite target if existing. Overwrite wins over `ignoreIfExists`",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TextDocumentEdit": {
            "description": "Describes textual changes on a text document. A TextDocumentEdit describes all changes\non a document version Si and after they are applied move the document to version Si+1.\nSo the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any\nkind of ordering. However the edits must be non overlapping.\nThe TextDocumentEdit namespace provides helper function to create\nan edit that manipulates a text document.",
            "properties": {
                "edits": {
                    "description": "The edits to be applied.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "/CodeAction#/definitions/TextEdit"
                            },
                            {
                                "$ref": "/CodeAction#/definitions/AnnotatedTextEdit"
                            }
                        ]
                    },
                    "type": "array"
                },
                "textDocument": {
                    "$ref": "/CodeAction#/definitions/OptionalVersionedTextDocumentIdentifier",
                    "description": "The text document to change."
                }
            },
            "required": [
                "edits",
                "textDocument"
            ],
            "type": "object"
        },
        "TextEdit": {
            "description": "A text edit applicable to a text document.\nThe TextEdit namespace provides helper function to create replace,\ninsert and delete edits more easily.",
            "properties": {
                "newText": {
                    "description": "The string to be inserted. For delete operations use an\nempty string.",
                    "type": "string"
                },
                "range": {
                    "$ref": "/CodeAction#/definitions/Range",
                    "description": "The range of the text document to be manipulated. To insert\ntext into a document create a range where start === end."
                }
            },
            "required": [
                "newText",
                "range"
            ],
            "type": "object"
        },
        "URI": {
            "description": "A tagging type for string properties that are actually URIs",
            "type": "string"
        },
        "WorkspaceEdit": {
            "description": "A workspace edit represents changes to many resources managed in the workspace. The edit\nshould either provide `changes` or `documentChanges`. If documentChanges are present\nthey are preferred over `changes` if the client can handle versioned document edits.",
            "properties": {
                "changeAnnotations": {
                    "additionalProperties": {
                        "$ref": "/CodeAction#/definitions/ChangeAnnotation"
                    },
                    "description": "A map of change annotations that can be referenced in `AnnotatedTextEdit`s or create, rename and\ndelete file / folder operations.\n\nWhether clients honor this property depends on the client capability `workspace.changeAnnotationSupport`.",
                    "type": "object"
                },
                "changes": {
                    "additionalProperties": {
                        "items": {
                            "$ref": "/CodeAction#/definitions/TextEdit"
                        },
                        "type": "array"
                    },
                    "description": "Holds changes to existing resources.",
                    "type": "object"
                },
                "documentChanges": {
                    "description": "Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes\nare either an array of `TextDocumentEdit`s to express changes to n different text documents\nwhere each text document edit addresses a specific version of a text document. Or it can contain\nabove `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.\n\nWhether a client supports versioned document edits is expressed via\n`workspace.workspaceEdit.documentChanges` client capability.\n\nIf a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then\nonly plain `TextEdit`s using the `changes` property are supported.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "/CodeAction#/definitions/TextDocumentEdit"
                            },
                            {
                                "$ref": "/CodeAction#/definitions/CreateFile"
                            },
                            {
                                "$ref": "/CodeAction#/definitions/RenameFile"
                            },
                            {
                                "$ref": "/CodeAction#/definitions/DeleteFile"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "uinteger": {
            "description": "Defines an unsigned integer in the range of 0 to 2^31 - 1.",
            "type": "number"
        }
    },
    "description": "A code action represents a change that can be performed in code, e.g. to fix a problem or\nto refactor code.\n\nA CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.",
    "properties": {
        "command": {
            "$ref": "/CodeAction#/definitions/Command",
            "description": "A command this code action executes. If a code action\nprovides a edit and a command, first the edit is\nexecuted and then the command."
        },
        "data": {
            "description": "A data entry field that is preserved on a code action between\na `textDocument/codeAction` and a `codeAction/resolve` request."
        },
        "diagnostics": {
            "description": "The diagnostics that this code action resolves.",
            "items": {
                "$ref": "/CodeAction#/definitions/Diagnostic"
            },
            "type": "array"
        },
        "disabled": {
            "description": "Marks that the code action cannot currently be applied.\n\nClients should follow the following guidelines regarding disabled code actions:\n\n  - Disabled code actions are not shown in automatic [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)\n    code action menu.\n\n  - Disabled actions are shown as faded out in the code action menu when the user request a more specific type\n    of code action, such as refactorings.\n\n  - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)\n    that auto applies a code action and only a disabled code actions are returned, the client should show the user an\n    error message with `reason` in the editor.",
            "properties": {
                "reason": {
                    "description": "Human readable description of why the code action is currently disabled.\n\nThis is displayed in the code actions UI.",
                    "type": "string"
                }
            },
            "required": [
                "reason"
            ],
            "type": "object"
        },
        "edit": {
            "$ref": "/CodeAction#/definitions/WorkspaceEdit",
            "description": "The workspace edit this code action performs."
        },
        "isPreferred": {
            "description": "Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted\nby keybindings.\n\nA quick fix should be marked preferred if it properly addresses the underlying error.\nA refactoring should be marked preferred if it is the most reasonable choice of actions to take.",
            "type": "boolean"
        },
        "kind": {
            "$ref": "/CodeAction#/definitions/CodeActionKind",
            "description": "The kind of the code action.\n\nUsed to filter code actions."
        },
        "title": {
            "description": "A short, human-readable, title for this code action.",
            "type": "string"
        }
    },
    "required": [
        "title"
    ],
    "type": "object"
}

