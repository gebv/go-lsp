{
    "$id": "/TextDocumentClientCapabilities",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CallHierarchyClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`\nreturn value for the corresponding server capability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CodeActionClientCapabilities": {
            "description": "The Client Capabilities of a [CodeActionRequest](#CodeActionRequest).",
            "properties": {
                "codeActionLiteralSupport": {
                    "description": "The client support code action literals of type `CodeAction` as a valid\nresponse of the `textDocument/codeAction` request. If the property is not\nset the request can only return `Command` literals.",
                    "properties": {
                        "codeActionKind": {
                            "description": "The code action kind is support with the following value\nset.",
                            "properties": {
                                "valueSet": {
                                    "description": "The code action kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "valueSet"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "codeActionKind"
                    ],
                    "type": "object"
                },
                "dataSupport": {
                    "description": "Whether code action supports the `data` property which is\npreserved between a `textDocument/codeAction` and a\n`codeAction/resolve` request.",
                    "type": "boolean"
                },
                "disabledSupport": {
                    "description": "Whether code action supports the `disabled` property.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether code action supports dynamic registration.",
                    "type": "boolean"
                },
                "honorsChangeAnnotations": {
                    "description": "Whether th client honors the change annotations in\ntext edits and resource operations returned via the\n`CodeAction#edit` property by for example presenting\nthe workspace edit in the user interface and asking\nfor confirmation.",
                    "type": "boolean"
                },
                "isPreferredSupport": {
                    "description": "Whether code action supports the `isPreferred` property.",
                    "type": "boolean"
                },
                "resolveSupport": {
                    "description": "Whether the client support resolving additional code action\nproperties via a separate `codeAction/resolve` request.",
                    "properties": {
                        "properties": {
                            "description": "The properties that a client can resolve lazily.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "properties"
                    ],
                    "type": "object"
                }
            },
            "type": "object"
        },
        "CodeLensClientCapabilities": {
            "description": "The client capabilities  of a [CodeLensRequest](#CodeLensRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether code lens supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CompletionClientCapabilities": {
            "description": "Completion client capabilities",
            "properties": {
                "completionItem": {
                    "description": "The client supports the following `CompletionItem` specific\ncapabilities.",
                    "properties": {
                        "commitCharactersSupport": {
                            "description": "Client supports commit characters on a completion item.",
                            "type": "boolean"
                        },
                        "deprecatedSupport": {
                            "description": "Client supports the deprecated property on a completion item.",
                            "type": "boolean"
                        },
                        "documentationFormat": {
                            "description": "Client supports the follow content formats for the documentation\nproperty. The order describes the preferred format of the client.",
                            "items": {
                                "description": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
                                "enum": [
                                    "markdown",
                                    "plaintext"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "insertReplaceSupport": {
                            "description": "Client support insert replace edit to control different behavior if a\ncompletion item is inserted in the text or should replace text.",
                            "type": "boolean"
                        },
                        "insertTextModeSupport": {
                            "description": "The client supports the `insertTextMode` property on\na completion item to override the whitespace handling mode\nas defined by the client (see `insertTextMode`).",
                            "properties": {
                                "valueSet": {
                                    "items": {
                                        "description": "How whitespace and indentation is handled during completion\nitem insertion.",
                                        "enum": [
                                            1,
                                            2
                                        ],
                                        "type": "number"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "valueSet"
                            ],
                            "type": "object"
                        },
                        "preselectSupport": {
                            "description": "Client supports the preselect property on a completion item.",
                            "type": "boolean"
                        },
                        "resolveSupport": {
                            "description": "Indicates which properties a client can resolve lazily on a completion\nitem. Before version 3.16.0 only the predefined properties `documentation`\nand `details` could be resolved lazily.",
                            "properties": {
                                "properties": {
                                    "description": "The properties that a client can resolve lazily.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "properties"
                            ],
                            "type": "object"
                        },
                        "snippetSupport": {
                            "description": "Client supports snippets as insert text.\n\nA snippet can define tab stops and placeholders with `$1`, `$2`\nand `${3:foo}`. `$0` defines the final tab stop, it defaults to\nthe end of the snippet. Placeholders with equal identifiers are linked,\nthat is typing in one will update others too.",
                            "type": "boolean"
                        },
                        "tagSupport": {
                            "description": "Client supports the tag property on a completion item. Clients supporting\ntags have to handle unknown tags gracefully. Clients especially need to\npreserve unknown tags when sending a completion item back to the server in\na resolve call.",
                            "properties": {
                                "valueSet": {
                                    "description": "The tags supported by the client.",
                                    "items": {
                                        "enum": [
                                            1
                                        ],
                                        "type": "number"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "valueSet"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "completionItemKind": {
                    "properties": {
                        "valueSet": {
                            "description": "The completion item kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe completion items kinds from `Text` to `Reference` as defined in\nthe initial version of the protocol.",
                            "items": {
                                "description": "The kind of a completion entry.",
                                "enum": [
                                    1,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    2,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "contextSupport": {
                    "description": "The client supports to send additional context information for a\n`textDocument/completion` request.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether completion supports dynamic registration.",
                    "type": "boolean"
                },
                "insertTextMode": {
                    "$ref": "/TextDocumentClientCapabilities#/definitions/InsertTextMode",
                    "description": "Defines how the client handles whitespace and indentation\nwhen accepting a completion item that uses multi line\ntext in either `insertText` or `textEdit`."
                }
            },
            "type": "object"
        },
        "DeclarationClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether declaration supports dynamic registration. If this is set to `true`\nthe client supports the new `DeclarationRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of declaration links.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DefinitionClientCapabilities": {
            "description": "Client Capabilities for a [DefinitionRequest](#DefinitionRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether definition supports dynamic registration.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of definition links.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentColorClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `DocumentColorRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentFormattingClientCapabilities": {
            "description": "Client capabilities of a [DocumentFormattingRequest](#DocumentFormattingRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether formatting supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentHighlightClientCapabilities": {
            "description": "Client Capabilities for a [DocumentHighlightRequest](#DocumentHighlightRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether document highlight supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentLinkClientCapabilities": {
            "description": "The client capabilities of a [DocumentLinkRequest](#DocumentLinkRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether document link supports dynamic registration.",
                    "type": "boolean"
                },
                "tooltipSupport": {
                    "description": "Whether the client support the `tooltip` property on `DocumentLink`.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentOnTypeFormattingClientCapabilities": {
            "description": "Client capabilities of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether on type formatting supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentRangeFormattingClientCapabilities": {
            "description": "Client capabilities of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether range formatting supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentSymbolClientCapabilities": {
            "description": "Client Capabilities for a [DocumentSymbolRequest](#DocumentSymbolRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether document symbol supports dynamic registration.",
                    "type": "boolean"
                },
                "hierarchicalDocumentSymbolSupport": {
                    "description": "The client support hierarchical document symbols.",
                    "type": "boolean"
                },
                "labelSupport": {
                    "description": "The client supports an additional label presented in the UI when\nregistering a document symbol provider.",
                    "type": "boolean"
                },
                "symbolKind": {
                    "description": "Specific capabilities for the `SymbolKind`.",
                    "properties": {
                        "valueSet": {
                            "description": "The symbol kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe symbol kinds from `File` to `Array` as defined in\nthe initial version of the protocol.",
                            "items": {
                                "description": "A symbol kind.",
                                "enum": [
                                    1,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    2,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    26,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "tagSupport": {
                    "description": "The client supports tags on `SymbolInformation`. Tags are supported on\n`DocumentSymbol` if `hierarchicalDocumentSymbolSupport` is set to true.\nClients supporting tags have to handle unknown tags gracefully.",
                    "properties": {
                        "valueSet": {
                            "description": "The tags supported by the client.",
                            "items": {
                                "enum": [
                                    1
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "valueSet"
                    ],
                    "type": "object"
                }
            },
            "type": "object"
        },
        "FoldingRangeClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration for folding range providers. If this is set to `true`\nthe client supports the new `FoldingRangeRegistrationOptions` return value for the corresponding server\ncapability as well.",
                    "type": "boolean"
                },
                "lineFoldingOnly": {
                    "description": "If set, the client signals that it only supports folding complete lines. If set, client will\nignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.",
                    "type": "boolean"
                },
                "rangeLimit": {
                    "$ref": "/TextDocumentClientCapabilities#/definitions/uinteger",
                    "description": "The maximum number of folding ranges that the client prefers to receive per document. The value serves as a\nhint, servers are free to follow the limit."
                }
            },
            "type": "object"
        },
        "HoverClientCapabilities": {
            "properties": {
                "contentFormat": {
                    "description": "Client supports the follow content formats for the content\nproperty. The order describes the preferred format of the client.",
                    "items": {
                        "description": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
                        "enum": [
                            "markdown",
                            "plaintext"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "dynamicRegistration": {
                    "description": "Whether hover supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ImplementationClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `ImplementationRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of definition links.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "InsertTextMode": {
            "description": "How whitespace and indentation is handled during completion\nitem insertion.",
            "enum": [
                1,
                2
            ],
            "type": "number"
        },
        "LinkedEditingRangeClientCapabilities": {
            "description": "Client capabilities for the linked editing range request.",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`\nreturn value for the corresponding server capability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MonikerClientCapabilities": {
            "description": "Client capabilities specific to the moniker request.",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether moniker supports dynamic registration. If this is set to `true`\nthe client supports the new `MonikerRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PrepareSupportDefaultBehavior": {
            "enum": [
                1
            ],
            "type": "number"
        },
        "PublishDiagnosticsClientCapabilities": {
            "description": "The publish diagnostic client capabilities.",
            "properties": {
                "codeDescriptionSupport": {
                    "description": "Client supports a codeDescription property",
                    "type": "boolean"
                },
                "dataSupport": {
                    "description": "Whether code action supports the `data` property which is\npreserved between a `textDocument/publishDiagnostics` and\n`textDocument/codeAction` request.",
                    "type": "boolean"
                },
                "relatedInformation": {
                    "description": "Whether the clients accepts diagnostics with related information.",
                    "type": "boolean"
                },
                "tagSupport": {
                    "description": "Client supports the tag property to provide meta data about a diagnostic.\nClients supporting tags have to handle unknown tags gracefully.",
                    "properties": {
                        "valueSet": {
                            "description": "The tags supported by the client.",
                            "items": {
                                "description": "The diagnostic tags.",
                                "enum": [
                                    1,
                                    2
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "valueSet"
                    ],
                    "type": "object"
                },
                "versionSupport": {
                    "description": "Whether the client interprets the version property of the\n`textDocument/publishDiagnostics` notification`s parameter.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ReferenceClientCapabilities": {
            "description": "Client Capabilities for a [ReferencesRequest](#ReferencesRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether references supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RenameClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether rename supports dynamic registration.",
                    "type": "boolean"
                },
                "honorsChangeAnnotations": {
                    "description": "Whether th client honors the change annotations in\ntext edits and resource operations returned via the\nrename request's workspace edit by for example presenting\nthe workspace edit in the user interface and asking\nfor confirmation.",
                    "type": "boolean"
                },
                "prepareSupport": {
                    "description": "Client supports testing for validity of rename operations\nbefore execution.",
                    "type": "boolean"
                },
                "prepareSupportDefaultBehavior": {
                    "$ref": "/TextDocumentClientCapabilities#/definitions/PrepareSupportDefaultBehavior",
                    "description": "Client supports the default behavior result.\n\nThe value indicates the default behavior used by the\nclient."
                }
            },
            "type": "object"
        },
        "SelectionRangeClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration for selection range providers. If this is set to `true`\nthe client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server\ncapability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SemanticTokensClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`\nreturn value for the corresponding server capability as well.",
                    "type": "boolean"
                },
                "formats": {
                    "description": "The token formats the clients supports.",
                    "items": {
                        "enum": [
                            "relative"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "multilineTokenSupport": {
                    "description": "Whether the client supports tokens that can span multiple lines.",
                    "type": "boolean"
                },
                "overlappingTokenSupport": {
                    "description": "Whether the client supports tokens that can overlap each other.",
                    "type": "boolean"
                },
                "requests": {
                    "description": "Which requests the client supports and might send to the server\ndepending on the server's capability. Please note that clients might not\nshow semantic tokens or degrade some of the user experience if a range\nor full request is advertised by the client but not provided by the\nserver. If for example the client capability `requests.full` and\n`request.range` are both set to true but the server only provides a\nrange provider the client might not render a minimap correctly or might\neven decide to not show any semantic tokens at all.",
                    "properties": {
                        "full": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "delta": {
                                            "description": "The client will send the `textDocument/semanticTokens/full/delta` request if\nthe server provides a corresponding handler.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "boolean"
                                }
                            ],
                            "description": "The client will send the `textDocument/semanticTokens/full` request if\nthe server provides a corresponding handler."
                        },
                        "range": {
                            "anyOf": [
                                {
                                    "properties": {},
                                    "type": "object"
                                },
                                {
                                    "type": "boolean"
                                }
                            ],
                            "description": "The client will send the `textDocument/semanticTokens/range` request if\nthe server provides a corresponding handler."
                        }
                    },
                    "type": "object"
                },
                "tokenModifiers": {
                    "description": "The token modifiers that the client supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tokenTypes": {
                    "description": "The token types that the client supports.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "formats",
                "requests",
                "tokenModifiers",
                "tokenTypes"
            ],
            "type": "object"
        },
        "SignatureHelpClientCapabilities": {
            "description": "Client Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).",
            "properties": {
                "contextSupport": {
                    "description": "The client supports to send additional context information for a\n`textDocument/signatureHelp` request. A client that opts into\ncontextSupport will also support the `retriggerCharacters` on\n`SignatureHelpOptions`.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether signature help supports dynamic registration.",
                    "type": "boolean"
                },
                "signatureInformation": {
                    "description": "The client supports the following `SignatureInformation`\nspecific properties.",
                    "properties": {
                        "activeParameterSupport": {
                            "description": "The client support the `activeParameter` property on `SignatureInformation`\nliteral.",
                            "type": "boolean"
                        },
                        "documentationFormat": {
                            "description": "Client supports the follow content formats for the documentation\nproperty. The order describes the preferred format of the client.",
                            "items": {
                                "description": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
                                "enum": [
                                    "markdown",
                                    "plaintext"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "parameterInformation": {
                            "description": "Client capabilities specific to parameter information.",
                            "properties": {
                                "labelOffsetSupport": {
                                    "description": "The client supports processing label offsets instead of a\nsimple label string.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "TextDocumentSyncClientCapabilities": {
            "properties": {
                "didSave": {
                    "description": "The client supports did save notifications.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether text document synchronization supports dynamic registration.",
                    "type": "boolean"
                },
                "willSave": {
                    "description": "The client supports sending will save notifications.",
                    "type": "boolean"
                },
                "willSaveWaitUntil": {
                    "description": "The client supports sending a will save request and\nwaits for a response providing text edits which will\nbe applied to the document before it is saved.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TypeDefinitionClientCapabilities": {
            "description": "Since 3.6.0",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `TypeDefinitionRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of definition links.\n\nSince 3.14.0",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "uinteger": {
            "description": "Defines an unsigned integer in the range of 0 to 2^31 - 1.",
            "type": "number"
        }
    },
    "description": "Text document specific client capabilities.",
    "properties": {
        "callHierarchy": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/CallHierarchyClientCapabilities",
            "description": "Capabilities specific to the various call hierarchy request."
        },
        "codeAction": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/CodeActionClientCapabilities",
            "description": "Capabilities specific to the `textDocument/codeAction`"
        },
        "codeLens": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/CodeLensClientCapabilities",
            "description": "Capabilities specific to the `textDocument/codeLens`"
        },
        "colorProvider": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentColorClientCapabilities",
            "description": "Capabilities specific to the `textDocument/documentColor`"
        },
        "completion": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/CompletionClientCapabilities",
            "description": "Capabilities specific to the `textDocument/completion`"
        },
        "declaration": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DeclarationClientCapabilities",
            "description": "Capabilities specific to the `textDocument/declaration`"
        },
        "definition": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DefinitionClientCapabilities",
            "description": "Capabilities specific to the `textDocument/definition`"
        },
        "documentHighlight": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentHighlightClientCapabilities",
            "description": "Capabilities specific to the `textDocument/documentHighlight`"
        },
        "documentLink": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentLinkClientCapabilities",
            "description": "Capabilities specific to the `textDocument/documentLink`"
        },
        "documentSymbol": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentSymbolClientCapabilities",
            "description": "Capabilities specific to the `textDocument/documentSymbol`"
        },
        "foldingRange": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/FoldingRangeClientCapabilities",
            "description": "Capabilities specific to `textDocument/foldingRange` request."
        },
        "formatting": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentFormattingClientCapabilities",
            "description": "Capabilities specific to the `textDocument/formatting`"
        },
        "hover": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/HoverClientCapabilities",
            "description": "Capabilities specific to the `textDocument/hover`"
        },
        "implementation": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/ImplementationClientCapabilities",
            "description": "Capabilities specific to the `textDocument/implementation`"
        },
        "linkedEditingRange": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/LinkedEditingRangeClientCapabilities",
            "description": "Capabilities specific to the linked editing range request."
        },
        "moniker": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/MonikerClientCapabilities",
            "description": "Client capabilities specific to the moniker request."
        },
        "onTypeFormatting": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentOnTypeFormattingClientCapabilities",
            "description": "Capabilities specific to the `textDocument/onTypeFormatting`"
        },
        "publishDiagnostics": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/PublishDiagnosticsClientCapabilities",
            "description": "Capabilities specific to `textDocument/publishDiagnostics` notification."
        },
        "rangeFormatting": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/DocumentRangeFormattingClientCapabilities",
            "description": "Capabilities specific to the `textDocument/rangeFormatting`"
        },
        "references": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/ReferenceClientCapabilities",
            "description": "Capabilities specific to the `textDocument/references`"
        },
        "rename": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/RenameClientCapabilities",
            "description": "Capabilities specific to the `textDocument/rename`"
        },
        "selectionRange": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/SelectionRangeClientCapabilities",
            "description": "Capabilities specific to `textDocument/selectionRange` request."
        },
        "semanticTokens": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/SemanticTokensClientCapabilities",
            "description": "Capabilities specific to the various semantic token request."
        },
        "signatureHelp": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/SignatureHelpClientCapabilities",
            "description": "Capabilities specific to the `textDocument/signatureHelp`"
        },
        "synchronization": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/TextDocumentSyncClientCapabilities",
            "description": "Defines which synchronization capabilities the client supports."
        },
        "typeDefinition": {
            "$ref": "/TextDocumentClientCapabilities#/definitions/TypeDefinitionClientCapabilities",
            "description": "Capabilities specific to the `textDocument/typeDefinition`"
        }
    },
    "required": [
        "moniker"
    ],
    "type": "object"
}

