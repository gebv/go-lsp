{
    "$id": "/SignatureHelpParams",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "DocumentUri": {
            "description": "A tagging type for string properties that are actually document URIs.",
            "type": "string"
        },
        "MarkupContent": {
            "description": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\nvalue: [\n\t'# Header',\n\t'Some text',\n\t'```typescript',\n\t'someCode();',\n\t'```'\n].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
            "properties": {
                "kind": {
                    "$ref": "/SignatureHelpParams#/definitions/MarkupKind",
                    "description": "The type of the Markup"
                },
                "value": {
                    "description": "The content itself",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MarkupKind": {
            "description": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
            "enum": [
                "markdown",
                "plaintext"
            ],
            "type": "string"
        },
        "ParameterInformation": {
            "description": "Represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.\nThe ParameterInformation namespace provides helper functions to work with\n[ParameterInformation](#ParameterInformation) literals.",
            "properties": {
                "documentation": {
                    "anyOf": [
                        {
                            "$ref": "/SignatureHelpParams#/definitions/MarkupContent"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The human-readable doc-comment of this signature. Will be shown\nin the UI but can be omitted."
                },
                "label": {
                    "anyOf": [
                        {
                            "items": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "number"
                                }
                            ],
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The label of this parameter information.\n\nEither a string or an inclusive start and exclusive end offsets within its containing\nsignature label. (see SignatureInformation.label). The offsets are based on a UTF-16\nstring representation as `Position` and `Range` does.\n\n*Note*: a label of type string should be a substring of its containing signature label.\nIts intended use case is to highlight the parameter label part in the `SignatureInformation.label`."
                }
            },
            "type": "object"
        },
        "Position": {
            "description": "Position in a text document expressed as zero-based line and character offset.\nThe offsets are based on a UTF-16 string representation. So a string of the form\n`a\ud801\udc00b` the character offset of the character `a` is 0, the character offset of `\ud801\udc00`\nis 1 and the character offset of b is 3 since `\ud801\udc00` is represented using two code\nunits in UTF-16.\n\nPositions are line end character agnostic. So you can not specify a position that\ndenotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position namespace provides helper functions to work with\n[Position](#Position) literals.",
            "properties": {
                "character": {
                    "$ref": "/SignatureHelpParams#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length."
                },
                "line": {
                    "$ref": "/SignatureHelpParams#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                }
            },
            "type": "object"
        },
        "ProgressToken": {
            "type": [
                "string",
                "number"
            ]
        },
        "SignatureHelp": {
            "description": "Signature help represents the signature of something\ncallable. There can be multiple signature but only one\nactive and only one active parameter.",
            "properties": {
                "activeParameter": {
                    "description": "The active parameter of the active signature. Set to `null`\nif the active signature has no parameters.",
                    "type": "number"
                },
                "activeSignature": {
                    "description": "The active signature. Set to `null` if no\nsignatures exist.",
                    "type": "number"
                },
                "signatures": {
                    "description": "One or more signatures.",
                    "items": {
                        "$ref": "/SignatureHelpParams#/definitions/SignatureInformation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SignatureHelpContext": {
            "description": "Additional information about the context in which a signature help request was triggered.",
            "properties": {
                "activeSignatureHelp": {
                    "$ref": "/SignatureHelpParams#/definitions/SignatureHelp",
                    "description": "The currently active `SignatureHelp`.\n\nThe `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on\nthe user navigating through available signatures."
                },
                "isRetrigger": {
                    "description": "`true` if signature help was already showing when it was triggered.\n\nRetrigger occurs when the signature help is already active and can be caused by actions such as\ntyping a trigger character, a cursor move, or document content changes.",
                    "type": "boolean"
                },
                "triggerCharacter": {
                    "description": "Character that caused signature help to be triggered.\n\nThis is undefined when `triggerKind !== SignatureHelpTriggerKind.TriggerCharacter`",
                    "type": "string"
                },
                "triggerKind": {
                    "$ref": "/SignatureHelpParams#/definitions/SignatureHelpTriggerKind",
                    "description": "Action that caused signature help to be triggered."
                }
            },
            "type": "object"
        },
        "SignatureHelpTriggerKind": {
            "description": "How a signature help was triggered.",
            "enum": [
                1,
                2,
                3
            ],
            "type": "number"
        },
        "SignatureInformation": {
            "description": "Represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters.\nThe SignatureInformation namespace provides helper functions to work with\n[SignatureInformation](#SignatureInformation) literals.",
            "properties": {
                "activeParameter": {
                    "$ref": "/SignatureHelpParams#/definitions/uinteger",
                    "description": "The index of the active parameter.\n\nIf provided, this is used in place of `SignatureHelp.activeParameter`."
                },
                "documentation": {
                    "anyOf": [
                        {
                            "$ref": "/SignatureHelpParams#/definitions/MarkupContent"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The human-readable doc-comment of this signature. Will be shown\nin the UI but can be omitted."
                },
                "label": {
                    "description": "The label of this signature. Will be shown in\nthe UI.",
                    "type": "string"
                },
                "parameters": {
                    "description": "The parameters of this signature.",
                    "items": {
                        "$ref": "/SignatureHelpParams#/definitions/ParameterInformation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TextDocumentIdentifier": {
            "description": "A literal to identify a text document in the client.\nThe TextDocumentIdentifier namespace provides helper functions to work with\n[TextDocumentIdentifier](#TextDocumentIdentifier) literals.",
            "properties": {
                "uri": {
                    "$ref": "/SignatureHelpParams#/definitions/DocumentUri",
                    "description": "The text document's uri."
                }
            },
            "type": "object"
        },
        "uinteger": {
            "description": "Defines an unsigned integer in the range of 0 to 2^31 - 1.",
            "type": "number"
        }
    },
    "description": "Parameters for a [SignatureHelpRequest](#SignatureHelpRequest).",
    "properties": {
        "context": {
            "$ref": "/SignatureHelpParams#/definitions/SignatureHelpContext",
            "description": "The signature help context. This is only available if the client specifies\nto send this using the client capability `textDocument.signatureHelp.contextSupport === true`"
        },
        "position": {
            "$ref": "/SignatureHelpParams#/definitions/Position",
            "description": "The position inside the text document."
        },
        "textDocument": {
            "$ref": "/SignatureHelpParams#/definitions/TextDocumentIdentifier",
            "description": "The text document."
        },
        "workDoneToken": {
            "$ref": "/SignatureHelpParams#/definitions/ProgressToken",
            "description": "An optional token that a server can use to report work done progress."
        }
    },
    "type": "object"
}

