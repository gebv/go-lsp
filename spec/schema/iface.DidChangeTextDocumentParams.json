{
    "$id": "/DidChangeTextDocumentParams",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "DocumentUri": {
            "description": "A tagging type for string properties that are actually document URIs.",
            "type": "string"
        },
        "Position": {
            "description": "Position in a text document expressed as zero-based line and character offset.\nThe offsets are based on a UTF-16 string representation. So a string of the form\n`a\ud801\udc00b` the character offset of the character `a` is 0, the character offset of `\ud801\udc00`\nis 1 and the character offset of b is 3 since `\ud801\udc00` is represented using two code\nunits in UTF-16.\n\nPositions are line end character agnostic. So you can not specify a position that\ndenotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position namespace provides helper functions to work with\n[Position](#Position) literals.",
            "properties": {
                "character": {
                    "$ref": "/DidChangeTextDocumentParams#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length."
                },
                "line": {
                    "$ref": "/DidChangeTextDocumentParams#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                }
            },
            "required": [
                "character",
                "line"
            ],
            "type": "object"
        },
        "Range": {
            "description": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```\nThe Range namespace provides helper functions to work with\n[Range](#Range) literals.",
            "properties": {
                "end": {
                    "$ref": "/DidChangeTextDocumentParams#/definitions/Position",
                    "description": "The range's end position."
                },
                "start": {
                    "$ref": "/DidChangeTextDocumentParams#/definitions/Position",
                    "description": "The range's start position"
                }
            },
            "required": [
                "end",
                "start"
            ],
            "type": "object"
        },
        "VersionedTextDocumentIdentifier": {
            "description": "A text document identifier to denote a specific version of a text document.\nThe VersionedTextDocumentIdentifier namespace provides helper functions to work with\n[VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.",
            "properties": {
                "uri": {
                    "$ref": "/DidChangeTextDocumentParams#/definitions/DocumentUri",
                    "description": "The text document's uri."
                },
                "version": {
                    "$ref": "/DidChangeTextDocumentParams#/definitions/integer",
                    "description": "The version number of this document."
                }
            },
            "required": [
                "uri",
                "version"
            ],
            "type": "object"
        },
        "integer": {
            "description": "Defines an integer in the range of -2^31 to 2^31 - 1.",
            "type": "integer"
        },
        "uinteger": {
            "description": "Defines an unsigned integer in the range of 0 to 2^31 - 1.",
            "type": "number"
        }
    },
    "description": "The change text document notification's parameters.",
    "properties": {
        "contentChanges": {
            "description": "The actual content changes. The content changes describe single state changes\nto the document. So if there are two content changes c1 (at array index 0) and\nc2 (at array index 1) for a document in state S then c1 moves the document from\nS to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed\non the state S'.\n\nTo mirror the content of a document using change events use the following approach:\n- start with the same initial content\n- apply the 'textDocument/didChange' notifications in the order you receive them.\n- apply the `TextDocumentContentChangeEvent`s in a single notification in the order\n  you receive them.",
            "items": {
                "anyOf": [
                    {
                        "properties": {
                            "range": {
                                "$ref": "/DidChangeTextDocumentParams#/definitions/Range",
                                "description": "The range of the document that changed."
                            },
                            "rangeLength": {
                                "$ref": "/DidChangeTextDocumentParams#/definitions/uinteger",
                                "description": "The optional length of the range that got replaced."
                            },
                            "text": {
                                "description": "The new text for the provided range.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "range",
                            "text"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "text": {
                                "description": "The new text of the whole document.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "text"
                        ],
                        "type": "object"
                    }
                ],
                "description": "An event describing a change to a text document. If range and rangeLength are omitted\nthe new text is considered to be the full content of the document."
            },
            "type": "array"
        },
        "textDocument": {
            "$ref": "/DidChangeTextDocumentParams#/definitions/VersionedTextDocumentIdentifier",
            "description": "The document that did change. The version number points\nto the version after all provided content changes have\nbeen applied."
        }
    },
    "required": [
        "contentChanges",
        "textDocument"
    ],
    "type": "object"
}

