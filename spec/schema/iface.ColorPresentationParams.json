{
    "$id": "/ColorPresentationParams",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Color": {
            "description": "Represents a color in RGBA space.\nThe Color namespace provides helper functions to work with\n[Color](#Color) literals.",
            "properties": {
                "alpha": {
                    "$ref": "/ColorPresentationParams#/definitions/decimal",
                    "description": "The alpha component of this color in the range [0-1]."
                },
                "blue": {
                    "$ref": "/ColorPresentationParams#/definitions/decimal",
                    "description": "The blue component of this color in the range [0-1]."
                },
                "green": {
                    "$ref": "/ColorPresentationParams#/definitions/decimal",
                    "description": "The green component of this color in the range [0-1]."
                },
                "red": {
                    "$ref": "/ColorPresentationParams#/definitions/decimal",
                    "description": "The red component of this color in the range [0-1]."
                }
            },
            "type": "object"
        },
        "DocumentUri": {
            "description": "A tagging type for string properties that are actually document URIs.",
            "type": "string"
        },
        "Position": {
            "description": "Position in a text document expressed as zero-based line and character offset.\nThe offsets are based on a UTF-16 string representation. So a string of the form\n`a\ud801\udc00b` the character offset of the character `a` is 0, the character offset of `\ud801\udc00`\nis 1 and the character offset of b is 3 since `\ud801\udc00` is represented using two code\nunits in UTF-16.\n\nPositions are line end character agnostic. So you can not specify a position that\ndenotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position namespace provides helper functions to work with\n[Position](#Position) literals.",
            "properties": {
                "character": {
                    "$ref": "/ColorPresentationParams#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length."
                },
                "line": {
                    "$ref": "/ColorPresentationParams#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                }
            },
            "type": "object"
        },
        "ProgressToken": {
            "type": [
                "string",
                "number"
            ]
        },
        "Range": {
            "description": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```\nThe Range namespace provides helper functions to work with\n[Range](#Range) literals.",
            "properties": {
                "end": {
                    "$ref": "/ColorPresentationParams#/definitions/Position",
                    "description": "The range's end position."
                },
                "start": {
                    "$ref": "/ColorPresentationParams#/definitions/Position",
                    "description": "The range's start position"
                }
            },
            "type": "object"
        },
        "TextDocumentIdentifier": {
            "description": "A literal to identify a text document in the client.\nThe TextDocumentIdentifier namespace provides helper functions to work with\n[TextDocumentIdentifier](#TextDocumentIdentifier) literals.",
            "properties": {
                "uri": {
                    "$ref": "/ColorPresentationParams#/definitions/DocumentUri",
                    "description": "The text document's uri."
                }
            },
            "type": "object"
        },
        "decimal": {
            "description": "Defines a decimal number. Since decimal numbers are very\nrare in the language server specification we denote the\nexact range with every decimal using the mathematics\ninterval notations (e.g. [0, 1] denotes all decimals d with\n0 <= d <= 1.",
            "type": "number"
        },
        "uinteger": {
            "description": "Defines an unsigned integer in the range of 0 to 2^31 - 1.",
            "type": "number"
        }
    },
    "description": "Parameters for a [ColorPresentationRequest](#ColorPresentationRequest).",
    "properties": {
        "color": {
            "$ref": "/ColorPresentationParams#/definitions/Color",
            "description": "The color to request presentations for."
        },
        "partialResultToken": {
            "$ref": "/ColorPresentationParams#/definitions/ProgressToken",
            "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client."
        },
        "range": {
            "$ref": "/ColorPresentationParams#/definitions/Range",
            "description": "The range where the color would be inserted. Serves as a context."
        },
        "textDocument": {
            "$ref": "/ColorPresentationParams#/definitions/TextDocumentIdentifier",
            "description": "The text document."
        },
        "workDoneToken": {
            "$ref": "/ColorPresentationParams#/definitions/ProgressToken",
            "description": "An optional token that a server can use to report work done progress."
        }
    },
    "type": "object"
}

