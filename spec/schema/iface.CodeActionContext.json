{
    "$id": "/CodeActionContext",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CodeDescription": {
            "description": "Structure to capture a description for an error code.\nThe CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.",
            "properties": {
                "href": {
                    "$ref": "/CodeActionContext#/definitions/URI",
                    "description": "An URI to open with more information about the diagnostic error."
                }
            },
            "required": [
                "href"
            ],
            "type": "object"
        },
        "Diagnostic": {
            "description": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a resource.\nThe Diagnostic namespace provides helper functions to work with\n[Diagnostic](#Diagnostic) literals.",
            "properties": {
                "code": {
                    "description": "The diagnostic's code, which usually appear in the user interface.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "codeDescription": {
                    "$ref": "/CodeActionContext#/definitions/CodeDescription",
                    "description": "An optional property to describe the error code."
                },
                "data": {
                    "description": "A data entry field that is preserved between a `textDocument/publishDiagnostics`\nnotification and `textDocument/codeAction` request."
                },
                "message": {
                    "description": "The diagnostic's message. It usually appears in the user interface",
                    "type": "string"
                },
                "range": {
                    "$ref": "/CodeActionContext#/definitions/Range",
                    "description": "The range at which the message applies"
                },
                "relatedInformation": {
                    "description": "An array of related diagnostic information, e.g. when symbol-names within\na scope collide all definitions can be marked via this property.",
                    "items": {
                        "$ref": "/CodeActionContext#/definitions/DiagnosticRelatedInformation"
                    },
                    "type": "array"
                },
                "severity": {
                    "$ref": "/CodeActionContext#/definitions/DiagnosticSeverity",
                    "description": "The diagnostic's severity. Can be omitted. If omitted it is up to the\nclient to interpret diagnostics as error, warning, info or hint."
                },
                "source": {
                    "description": "A human-readable string describing the source of this\ndiagnostic, e.g. 'typescript' or 'super lint'. It usually\nappears in the user interface.",
                    "type": "string"
                },
                "tags": {
                    "description": "Additional metadata about the diagnostic.",
                    "items": {
                        "description": "The diagnostic tags.",
                        "enum": [
                            1,
                            2
                        ],
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "required": [
                "message",
                "range"
            ],
            "type": "object"
        },
        "DiagnosticRelatedInformation": {
            "description": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g when duplicating\na symbol in a scope.\nThe DiagnosticRelatedInformation namespace provides helper functions to work with\n[DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.",
            "properties": {
                "location": {
                    "$ref": "/CodeActionContext#/definitions/Location",
                    "description": "The location of this related diagnostic information."
                },
                "message": {
                    "description": "The message of this related diagnostic information.",
                    "type": "string"
                }
            },
            "required": [
                "location",
                "message"
            ],
            "type": "object"
        },
        "DiagnosticSeverity": {
            "description": "The diagnostic's severity.",
            "enum": [
                1,
                2,
                3,
                4
            ],
            "type": "number"
        },
        "DocumentUri": {
            "description": "A tagging type for string properties that are actually document URIs.",
            "type": "string"
        },
        "Location": {
            "description": "Represents a location inside a resource, such as a line\ninside a text file.\nThe Location namespace provides helper functions to work with\n[Location](#Location) literals.",
            "properties": {
                "range": {
                    "$ref": "/CodeActionContext#/definitions/Range"
                },
                "uri": {
                    "$ref": "/CodeActionContext#/definitions/DocumentUri"
                }
            },
            "required": [
                "range",
                "uri"
            ],
            "type": "object"
        },
        "Position": {
            "description": "Position in a text document expressed as zero-based line and character offset.\nThe offsets are based on a UTF-16 string representation. So a string of the form\n`a\ud801\udc00b` the character offset of the character `a` is 0, the character offset of `\ud801\udc00`\nis 1 and the character offset of b is 3 since `\ud801\udc00` is represented using two code\nunits in UTF-16.\n\nPositions are line end character agnostic. So you can not specify a position that\ndenotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position namespace provides helper functions to work with\n[Position](#Position) literals.",
            "properties": {
                "character": {
                    "$ref": "/CodeActionContext#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length."
                },
                "line": {
                    "$ref": "/CodeActionContext#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                }
            },
            "required": [
                "character",
                "line"
            ],
            "type": "object"
        },
        "Range": {
            "description": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```\nThe Range namespace provides helper functions to work with\n[Range](#Range) literals.",
            "properties": {
                "end": {
                    "$ref": "/CodeActionContext#/definitions/Position",
                    "description": "The range's end position."
                },
                "start": {
                    "$ref": "/CodeActionContext#/definitions/Position",
                    "description": "The range's start position"
                }
            },
            "required": [
                "end",
                "start"
            ],
            "type": "object"
        },
        "URI": {
            "description": "A tagging type for string properties that are actually URIs",
            "type": "string"
        },
        "uinteger": {
            "description": "Defines an unsigned integer in the range of 0 to 2^31 - 1.",
            "type": "number"
        }
    },
    "description": "Contains additional diagnostic information about the context in which\na [code action](#CodeActionProvider.provideCodeActions) is run.\nThe CodeActionContext namespace provides helper functions to work with\n[CodeActionContext](#CodeActionContext) literals.",
    "properties": {
        "diagnostics": {
            "description": "An array of diagnostics known on the client side overlapping the range provided to the\n`textDocument/codeAction` request. They are provided so that the server knows which\nerrors are currently presented to the user for the given range. There is no guarantee\nthat these accurately reflect the error state of the resource. The primary parameter\nto compute code actions is the provided range.",
            "items": {
                "$ref": "/CodeActionContext#/definitions/Diagnostic"
            },
            "type": "array"
        },
        "only": {
            "description": "Requested kind of actions to return.\n\nActions not of this kind are filtered out by the client before being shown. So servers\ncan omit computing them.",
            "items": {
                "type": "string"
            },
            "type": "array"
        }
    },
    "required": [
        "diagnostics"
    ],
    "type": "object"
}

